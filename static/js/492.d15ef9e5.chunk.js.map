{"version":3,"file":"static/js/492.d15ef9e5.chunk.js","mappings":"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","sources":["containers/TrelloTodo.js","containers/InputTitle.js","containers/Cart.js","containers/ColumHeader.js","components/InputModal.js","containers/TodoLists.js","containers/ColumnList.js","containers/TrelloTodos.js","containers/Trello.js"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\n\r\nfunction TrelloTodo() {\r\n  const dispatch = useDispatch();\r\n  const length = useSelector(state=> state.trello.buttons.length)\r\n  let title = length > 1 ? '+ Добавте еще одну колонку' : '+ Добавить список'\r\n  return (\r\n    <AddButton\r\n      onClick={() =>\r\n        dispatch(\r\n          trelloActions.addButton({\r\n              name: \"list\",\r\n              id: Math.random().toString(),\r\n              title:'',\r\n              lists: []\r\n          })\r\n        )\r\n      }\r\n    >\r\n      {title}\r\n    </AddButton>\r\n  );\r\n}\r\n\r\nexport default TrelloTodo;\r\n\r\nconst AddButton = styled(\"button\")`\r\n  min-width: 250px;\r\n  height: 40px;\r\n  background-color: #ffffff3d;\r\n  border-radius: 3px;\r\n  border: none;\r\n  font-size: 15px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  color: white;\r\n  display: flex;\r\n  :hover {\r\n    background-color: #ffffff52;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\nimport { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction InputTitle({item}) {\r\n  const dispatch = useDispatch()\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const clickHandler = (id) => {\r\n    dispatch(trelloActions.addTitle({ title, id }));\r\n    if (title) {\r\n      dispatch(\r\n        trelloActions.addbt({\r\n          name: \"list\",\r\n          id: Math.random().toString(),\r\n          title: \"\",\r\n          changeTitle: false,\r\n          lists: [],\r\n        })\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <input \r\n      className=\"inputTitle\"\r\n        placeholder=\"Ввести заголовок списка\"\r\n        onChange={titleChangeHandler}\r\n        autoFocus\r\n      />\r\n      <div className=\"x-button\">\r\n        <Button onClick={() => clickHandler(item.id)}>Добавить в список</Button>\r\n        <button\r\n          className=\"x\"\r\n          onClick={() =>\r\n            dispatch(\r\n              trelloActions.addButton({\r\n                name: \"button\",\r\n              })\r\n            )\r\n          }\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputTitle;\r\n\r\nexport const Button = styled(\"button\")`\r\n  width: 150px;\r\n  height: 40px;\r\n  border-radius: 3px;\r\n  float: left;\r\n  border: none;\r\n  color: white;\r\n  cursor: pointer;\r\n  background-color: #0079bf;\r\n`;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\nimport { GrayButton } from \"./ColumnList\";\r\nimport { Button } from \"./InputTitle\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Cart(props) {\r\n  const [list, setList] = useState({});\r\n  const [showInput, setShowInput] = useState(true);\r\n  const dispatch = useDispatch();\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setList({\r\n      list: event.target.value,\r\n      description: \"\",\r\n      showModal:false,\r\n      id: Math.random().toString(),\r\n    });\r\n  };\r\n\r\n  const addList = (id) => {\r\n    dispatch(trelloActions.addToList({ list, id }));\r\n    setList({ list: \"\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showInput ? (\r\n        <Div>\r\n          <textarea\r\n            value={list.list}\r\n            onChange={inputChangeHandler}\r\n            autoFocus\r\n            placeholder=\"Ввести заголовок для этой карточки\"\r\n          />\r\n          <div>\r\n            <Button onClick={() => addList(props.id)}>Добавить карточку</Button>\r\n            <button className=\"x\" onClick={() => setShowInput(!showInput)}>\r\n              X\r\n            </button>\r\n            <span>...</span>\r\n          </div>\r\n        </Div>\r\n      ) : (\r\n        <GrayButton onClick={() => setShowInput(!showInput)}>\r\n          + Добавить карточку\r\n        </GrayButton>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n\r\nconst Div = styled(\"div\")`\r\n  width: 240px;\r\n  textarea {\r\n    max-width: 240px;\r\n    min-width: 240px;\r\n    height: 50px;\r\n    padding: 7px;\r\n    overflow: hidden;\r\n    border-radius: 3px;\r\n    border: none;\r\n    outline: none;\r\n    box-shadow: 0 1px 0 #091e4240;\r\n  }\r\n  div {\r\n    width: 240px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    span {\r\n      font-size: 30px;\r\n    }\r\n    .x {\r\n      font-size: 20px;\r\n      color: gray;\r\n      border: none;\r\n      cursor: pointer;\r\n      :hover {\r\n        color: black;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction ColumHeader({ item }) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Header>\r\n      {item.changeTitle ? (\r\n        <input \r\n        className=\"title\"\r\n          value={item.title}\r\n          autoFocus\r\n          onBlur={() => dispatch(trelloActions.changeTitle({ id: item.id }))}\r\n          onChange={(event) =>\r\n            dispatch(\r\n              trelloActions.addTitle({\r\n                title: event.target.value,\r\n                id: item.id,\r\n              })\r\n            )\r\n          }\r\n        />\r\n      ) : (\r\n        <p onClick={() => dispatch(trelloActions.changeTitle({ id: item.id }))}>\r\n          {item.title}\r\n        </p>\r\n      )}\r\n      <button\r\n        onClick={() => dispatch(trelloActions.delButton({ id: item.id }))}\r\n      >\r\n        X\r\n      </button>\r\n    </Header>\r\n  );\r\n}\r\n\r\nexport default ColumHeader;\r\n\r\nconst Header = styled(\"div\")`\r\n  width: 240px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 35px;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n  .title {\r\n    width: 200px;\r\n    height: 25px;\r\n    outline-color: #0079bf;\r\n  }\r\n  button {\r\n    height: 25px;\r\n    border: 1px solid #ebecf0;\r\n    background-color: #ebecf0;\r\n    cursor: pointer;\r\n    :hover {\r\n      background-color: #091e4214;\r\n    }\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\n\r\nfunction Backdrop({ listId, columnId }) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Back\r\n      onClick={() => dispatch(trelloActions.showModal({ listId, columnId }))}\r\n    ></Back>\r\n  );\r\n}\r\n\r\nfunction ModalOverlay({ title, heading, listId, columnId, description }) {\r\n  const dispatch = useDispatch();\r\n  const [descriptions, setDescriptions] = useState(\"\");\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setDescriptions(event.target.value);\r\n  };\r\n\r\n  const inputSaveHandler = (listId, columnId) => {\r\n    dispatch(trelloActions.addDescription({ listId, columnId, descriptions }));\r\n    dispatch(trelloActions.showModal({ listId, columnId }));\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <p className=\"title\">{title}</p>\r\n      <p className=\"heading\">\r\n        в колонке <span>{heading}</span>\r\n      </p>\r\n      <div>\r\n        <h1 className=\"description\">Описание</h1>\r\n        {!description ? (\r\n          <textarea\r\n            placeholder=\"Добавить более подробное описание…\"\r\n            onChange={inputChangeHandler}\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <p className=\"text\">{description}</p>\r\n        )}\r\n      </div>\r\n      <footer>\r\n        <Button\r\n          onClick={() =>\r\n            dispatch(trelloActions.showModal({ listId, columnId }))\r\n          }\r\n        >\r\n          {!description ? \"Отмена\" : \"Закрыть\"}\r\n        </Button>\r\n        {!description ? (\r\n          <Button onClick={() => inputSaveHandler(listId, columnId)}>\r\n            Сохранить\r\n          </Button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </footer>\r\n    </Card>\r\n  );\r\n}\r\nconst portalElement = document.getElementById(\"overlay\");\r\n\r\nfunction InputModal({ title, heading, listId, columnId, description }) {\r\n  return (\r\n    <>\r\n      {createPortal(\r\n        <Backdrop listId={listId} columnId={columnId} />,\r\n        portalElement\r\n      )}\r\n      {createPortal(\r\n        <ModalOverlay\r\n          title={title}\r\n          heading={heading}\r\n          listId={listId}\r\n          columnId={columnId}\r\n          description={description}\r\n        />,\r\n        portalElement\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InputModal;\r\n\r\nconst Card = styled(\"div\")`\r\n  width: 500px;\r\n  padding: 0 20px 20px 20px;\r\n  border-radius: 5px;\r\n  background-color: white;\r\n  position: absolute;\r\n  top: 100px;\r\n  left: 33%;\r\n  z-index: 11;\r\n  .title {\r\n    font-size: 20px;\r\n    color: #172b4d;\r\n  }\r\n  .description {\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    color: #172b4d;\r\n  }\r\n  .heading {\r\n    color: #5e6c84;\r\n    span {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  textarea {\r\n    max-width: 460px;\r\n    min-width: 460px;\r\n    height: 100px;\r\n    border-radius: 3px;\r\n    border: none;\r\n    outline-color: #4c9aff;\r\n    padding: 10px;\r\n    background-color: #091e420a;\r\n    box-shadow: 0 1px 0 #091e4240;\r\n    margin-bottom: 10px;\r\n  }\r\n  .text {\r\n    width: 460px;\r\n    min-height: 50px;\r\n    height: 100%;\r\n    border: 1px solid gray;\r\n    border-radius: 3px;\r\n    padding: 10px;\r\n    word-break: break-all;\r\n  }\r\n  footer {\r\n    width: 460px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    button {\r\n      margin-left: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Back = styled(\"div\")`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  z-index: 10;\r\n  background: rgba(0, 0, 0, 0.4);\r\n`;\r\n\r\nconst Button = styled(\"button\")`\r\n  width: 100px;\r\n  height: 30px;\r\n  background-color: #0079bf;\r\n  border-radius: 3px;\r\n  border: none;\r\n  color: white;\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport InputModal from \"../components/InputModal\";\r\nimport { trelloActions } from \"../store/slices/trelloSlice\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction TodoLists({item, el}) {\r\n    const dispatch = useDispatch()\r\n  return (\r\n    <Lists>\r\n      {el.showModal && (\r\n        <InputModal\r\n          title={el.list}\r\n          heading={item.title}\r\n          listId={el.id}\r\n          columnId={item.id}\r\n          description={el.description}\r\n        />\r\n      )}\r\n      <span\r\n        onClick={() =>\r\n          dispatch(\r\n            trelloActions.showModal({\r\n              listId: el.id,\r\n              columnId: item.id,\r\n            })\r\n          )\r\n        }\r\n      >\r\n        {el.list}\r\n      </span>\r\n      <button\r\n        onClick={() =>\r\n          dispatch(trelloActions.delList({ listId: el.id, columnId: item.id }))\r\n        }\r\n      >\r\n        X\r\n      </button>\r\n    </Lists>\r\n  );\r\n}\r\n\r\nexport default TodoLists;\r\n\r\nconst Lists = styled(\"div\")`\r\n  width: 240px;\r\n  height: 35px;\r\n  background-color: white;\r\n  color: #172b4d;\r\n  border-radius: 3px;\r\n  margin-bottom: 7px;\r\n  padding: 7px;\r\n  box-shadow: 0 1px 0 #091e4240;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  span {\r\n    color: #5e6c84;\r\n  }\r\n  button {\r\n    border: 1px solid #ebecf0;\r\n    background-color: #ebecf0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Cart from \"./Cart\";\r\nimport { useState } from \"react\";\r\nimport ColumHeader from \"./ColumHeader\";\r\nimport InputTitle from \"./InputTitle\";\r\nimport TodoLists from \"./TodoLists\";\r\n\r\nfunction ColumnList({ item }) {\r\n  const [isClick, setIsClick] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsClick(!isClick);\r\n  };\r\n\r\n  return (\r\n    <Column>\r\n      {item.title ? (\r\n        <div >\r\n          <ColumHeader item={item}/>\r\n          {item.lists.map((el) => {\r\n            return <TodoLists key={el.id} item={item} el={el}/>;\r\n          })}\r\n          {!isClick ? (\r\n            <GrayButton onClick={toggle}>Добавить карточку</GrayButton>\r\n          ) : (\r\n            <Cart id={item.id} />\r\n          )}\r\n        </div>\r\n      ) : <InputTitle item={item}/>}\r\n    </Column>\r\n  );\r\n}\r\n\r\nexport default ColumnList;\r\n\r\nconst Column = styled(\"div\")`\r\n  min-width: 250px;\r\n  max-width: 280px;\r\n  height: 100%;\r\n  margin-right: 10px;\r\n  padding: 5px;\r\n  background-color: #ebecf0;\r\n  border-radius: 3px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  max-height: 600px;\r\n  .x-button {\r\n    width: 240px;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .x {\r\n    margin-left: 10px;\r\n    font-size: 20px;\r\n    color: gray;\r\n    border: none;\r\n    cursor: pointer;\r\n    :hover {\r\n      color: black;\r\n    }\r\n  }\r\n  .inputTitle {\r\n    width: 240px;\r\n    height: 40px;\r\n    border-radius: 3px;\r\n    outline: none;\r\n    border: 2px solid gray;\r\n    margin-bottom: 5px;\r\n    :focus {\r\n      border: 2px solid #0079bf;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GrayButton = styled('button')`\r\nwidth: 240px;\r\nheight: 30px;\r\nborder: none;\r\ncolor: #5e6c84;\r\nborder-radius: 3px;\r\ntext-align: left;\r\npadding-left: 10px;\r\ncursor: pointer;\r\n:hover{\r\n  background-color: #091e4214;\r\n}\r\n`\r\n\r\n\r\n","import TrelloTodo from \"./TrelloTodo\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport ColumnList from \"./ColumnList\";\r\n\r\nfunction TrelloTodos({search}) {\r\n  const buttons = useSelector((state) => state.trello.buttons);\r\n\r\n  return (\r\n    <List>\r\n      {buttons.filter(el=>{\r\n        if(search === ''){\r\n          return el\r\n        }else if(el.title){\r\n          if(el.title.toLowerCase().includes(search.toLowerCase())){\r\n          return el\r\n          }\r\n        }\r\n      }).map((item) => {\r\n        if (item.name === \"list\") {\r\n          return <ColumnList key={item.id} item={item} \r\n          />\r\n        } else {\r\n          return <TrelloTodo key={item.id} />;\r\n        }\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TrelloTodos;\r\n\r\nconst List = styled(\"ul\")`\r\n  display: flex;\r\n  margin: 70px 0px;\r\n`;\r\n\r\n","import styled from \"styled-components\";\r\nimport trello from \"../assets/trello-logo-white.png\";\r\nimport menu from \"../assets/menu-logo.png\";\r\nimport info from \"../assets/info-logo.png\";\r\nimport bell from \"../assets/bell-logo.png\";\r\nimport TrelloTodos from \"./TrelloTodos\";\r\nimport {useNavigate} from 'react-router-dom'\r\nimport { useState } from \"react\";\r\n\r\nfunction Trello() {\r\n  const navigate = useNavigate()\r\n  const [search, setSearch] = useState('')\r\n  return (\r\n    <Block>\r\n      <Header>\r\n        <div className=\"left\">\r\n          <div className=\"logos\">\r\n            <div className=\"burger\">\r\n              <Image src={menu} />\r\n            </div>\r\n            <div className=\"trello\">\r\n              <Image src={trello} />\r\n              Trello\r\n            </div>\r\n          </div>\r\n          <List>\r\n            <li>Рабочие пространства </li>\r\n            <li>Недавние</li>\r\n            <li>Больше</li>\r\n            <li>Создать</li>\r\n          </List>\r\n        </div>\r\n        <div className=\"search\">\r\n          <Input placeholder=\"Поиск\" onChange={(event)=>setSearch(event.target.value)} />\r\n          <div><Image src={info} /></div>\r\n          <div><Image src={bell} /></div>\r\n          <button onClick={()=>navigate('/')}>Выйти</button>\r\n        </div>\r\n      </Header>\r\n      <TrelloTodos search={search}/>\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default Trello;\r\n\r\nconst Block = styled(\"div\")`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-image: url(\"https://cutewallpaper.org/21/trello-backgrounds/Trello-dark-theme-style-overrides-%CB%87-GitHub.jpg\");\r\n  background-size: cover;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  overflow-y: hidden;\r\n  overflow-x: scroll;\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nconst Header = styled(\"header\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  height: 50px;\r\n  background-color: rgba(64, 95, 114, 0.7);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  div {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n  }\r\n  .search {\r\n    width: 320px;\r\n    margin-right: 10px;\r\n    button{\r\n      padding: 5px;\r\n      border-radius: 3px;\r\n      border: none;\r\n      margin-left: 5px;\r\n    }\r\n    div{\r\n      padding: 7px;\r\n      margin-left: 5px;\r\n      border-radius: 3px;\r\n      :hover{\r\n        background-color: rgba(255, 255, 255, 0.2);\r\n      }\r\n    }\r\n  }\r\n  .logos {\r\n    width: 120px;\r\n    margin-left: 10px;\r\n    div{\r\n      padding: 7px;\r\n      border-radius: 3px;\r\n      :hover{\r\n      background-color: rgba(255, 255, 255, 0.2);\r\n    }\r\n    }\r\n    .trello {\r\n      width: 80px;\r\n      padding: 5px;\r\n      font-size: 20px;\r\n      font-weight: bold;\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\nconst Input = styled(\"input\")`\r\n  width: 250px;\r\n  height: 34px;\r\n  border-radius: 3px;\r\n  border: 1px solid rgba(255, 255, 255, 0.25);\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  outline: none;\r\n  padding-left: 20px;\r\n  ::placeholder {\r\n    color: white;\r\n  }\r\n  :focus {\r\n    background-color: white;\r\n  }\r\n  :focus::placeholder {\r\n    color: gray;\r\n  }\r\n`;\r\n\r\nconst Image = styled(\"img\")`\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\nconst List = styled(\"ul\")`\r\n  list-style: none;\r\n  width: 600px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 16px;\r\n  li {\r\n    height: 34px;\r\n    cursor: pointer;\r\n    border-radius: 3px;\r\n    padding: 7px 15px;\r\n    :hover {\r\n      background-color: rgba(255, 255, 255, 0.2);\r\n    }\r\n  }\r\n`;\r\n\r\n"],"names":["dispatch","useDispatch","title","useSelector","state","trello","buttons","length","AddButton","onClick","trelloActions","name","id","Math","random","toString","lists","styled","item","useState","setTitle","className","placeholder","onChange","event","target","value","autoFocus","Button","changeTitle","props","list","setList","showInput","setShowInput","Div","description","showModal","GrayButton","Header","onBlur","Backdrop","listId","columnId","Back","ModalOverlay","heading","descriptions","setDescriptions","Card","inputSaveHandler","portalElement","document","getElementById","createPortal","el","Lists","isClick","setIsClick","Column","map","search","List","filter","toLowerCase","includes","navigate","useNavigate","setSearch","Block","Image","src","Input"],"sourceRoot":""}